// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© maricelineradovanquerubin

//@version=5
strategy("Hamza Ember", overlay=true, margin_long=100, margin_short=100, currency = currency.USD)

//====================================================================================================================================================================================================================
//MAIN INPUTS
//====================================================================================================================================================================================================================

SL_Leeway = input.float(defval = 0.00020, title = "SL Leeway", minval = 0.00001, group = "Main Inputs")
RReward_Multiplier = input.float(defval = 1.0, title = "TP Or Reward Multiplier", minval = 0.01, group = "Main Inputs")

//====================================================================================================================================================================================================================
//FOREX EXCHANGE - CURRENCY CONVERSION
//====================================================================================================================================================================================================================

//Select Quote Currency
quoteCurrency = input.string(title = "Select Quote Currency", defval = "USD", options = ["USD", "EUR", "GBP", "AUD", "NZD", "CAD", "CHF", "JPY"])

//Get currency pair rate quoted against USD (Base Currency)
usdUSDrate = request.security("USDUSD", "D", close[1])
gbpUSDrate = request.security("GBPUSD", "D", close[1])
audUSDrate = request.security("AUDUSD", "D", close[1])
nzdUSDrate = request.security("NZDUSD", "D", close[1])
cadUSDrate = request.security("CADUSD", "D", close[1])
chfUSDrate = request.security("CHFUSD", "D", close[1])
eurUSDrate = request.security("EURUSD", "D", close[1])
jpyUSDrate = request.security("JPYUSD", "D", close[1])

//Function to get currency rate into variable

FUN_CurrencyRate(source)=>
    if quoteCurrency == "USD"
        1
    else
        if quoteCurrency == "GBP"
            gbpUSDrate
        else
            if quoteCurrency == "AUD"
                audUSDrate
            else
                if quoteCurrency == "NZD"
                    nzdUSDrate
                else
                    if quoteCurrency == "CAD"
                        cadUSDrate
                    else
                        if quoteCurrency == "CHF"
                            chfUSDrate
                        else
                            if quoteCurrency == "EUR"
                                eurUSDrate
                            else
                                jpyUSDrate

//Put currency rate function into variable. The CurrentRate_Multi function will be added to position size variable (posSize)
CurrentRate_Multi = FUN_CurrencyRate(ta.tr(true))  



//====================================================================================================================================================================================================================
//BACKTEST DATE RANGE - SELECT DATES
//====================================================================================================================================================================================================================







//====================================================================================================================================================================================================================
//MONEY MANAGEMENT (ATR) GET THAT BREAD (NOT NECESSARY)
//====================================================================================================================================================================================================================

//Enter initial capital and percentage risk inputs
initial_capital = input.float(title = "Starting Capital", defval = 400000)
percentRisk = input.float(title = "Risk Per Trade", defval = 0.0002, minval = 0.0001, maxval = 0.1)

//Enter ATR_SLTP Inputs
atrLength = 14
atrMulti_Profit = input.float(title = "ATR Profit Multiple", defval = 2.0)
atrMulti_Loss = input.float(title = "ATR Loss Multiple", defval = 1.0)

//ATR_SLTP Function Below: 
ma_function(source, length) => ta.rma(source, atrLength)

truncate(number, decimals) =>
    factor = math.pow(10, decimals)
    int (number * factor) / factor

atr_SLTP = truncate(ma_function(ta.tr(true), atrLength), 5)


//Calculate Position Size with ATR_SLTP Function 
posSize = math.round((initial_capital * percentRisk) / (atrMulti_Loss * atr_SLTP)) / (CurrentRate_Multi)



//====================================================================================================================================================================================================================
//TIME REQUIREMENTS
//====================================================================================================================================================================================================================

string starttimeInput = input.string(defval = "0900", title = "Session Start Time")
string endtimeInput = input.string(defval = "2000", title = "Session End Time")
string sessionInput = starttimeInput + "-" + endtimeInput
string daysInput = input.string("234567", tooltip = "1 = Sunday, 7 = Saturday")
sessionString = sessionInput + ":" + daysInput
inSession = not na(time(timeframe.period, sessionString, "Europe/London"))
bgcolor(inSession ? color.silver : na)

timeCondition = inSession ? true : false

//====================================================================================================================================================================================================================
//INDICATOR 0 - STARTING BIAS (LONG OR SHORT)
//====================================================================================================================================================================================================================s


//Pivot Points High/ Low Indicator: 
lengthGroupTitle = "PIVOT HIGH_LOW: LENGTH LEFT / RIGHT"
colorGroupTitle = "PIVOT HIGH_LOW: Text Color / Label Color"
leftLenH = input.int(title="Pivot High", defval=15, minval=1, inline="Pivot High", group=lengthGroupTitle)
rightLenH = input.int(title="/", defval=15, minval=1, inline="Pivot High", group=lengthGroupTitle)
textColorH = input(title="Pivot High", defval=color.green, inline="Pivot High", group=colorGroupTitle)
labelColorH = input(title="", defval=color.black, inline="Pivot High", group=colorGroupTitle)

leftLenL = input.int(title="Pivot Low", defval=15, minval=1, inline="Pivot Low", group=lengthGroupTitle)
rightLenL = input.int(title="/", defval=15, minval=1, inline="Pivot Low", group=lengthGroupTitle)
textColorL = input(title="Pivot Low", defval=color.red, inline="Pivot Low", group=colorGroupTitle)
labelColorL = input(title="", defval=color.black, inline="Pivot Low", group=colorGroupTitle)

ph = ta.pivothigh(high, leftLenH, rightLenH)
pl = ta.pivotlow(low, leftLenL, rightLenL)

drawLabel(_offset, _pivot, _style, _color, _textColor) =>
    if not na(_pivot)
        label.new(bar_index[_offset], _pivot, str.tostring(_pivot, format.mintick), style=_style, color=_color, textcolor=_textColor)

drawLabel(rightLenH, ph, label.style_label_down, labelColorH, textColorH)
drawLabel(rightLenL, pl, label.style_label_up, labelColorL, textColorL)

// Store Values
latest_phigh = float(0.0)
latest_plow = float(0.0)
previous_phigh = float(0.0)
previous_plow = float(0.0)

latest_phigh := ph[0]
latest_plow := pl[0]
previous_phigh := ph[1]
previous_plow := pl[1]

latest_phighPLUS =  float(0.0)
previous_phighPLUS =  float(0.0) 
latest_plowMINUS =  float(0.0)
previous_plowMINUS =  float(0.0)

latest_phighPLUS := latest_phigh + SL_Leeway
previous_phighPLUS := previous_phigh + SL_Leeway
latest_plowMINUS := latest_plow - SL_Leeway
previous_plowMINUS := previous_plow - SL_Leeway

//

SL_Long = float (0.0)
SL_Short = float (0.0)

SL_Long := latest_plow <= previous_plow ? latest_plowMINUS : previous_plowMINUS 
SL_Short := latest_phigh >= previous_phigh ? latest_phighPLUS : previous_phighPLUS



//
BarsSince_latest_phigh = float(0.0)
BarsSince_latest_plow = float(0.0)

BarsSince_latest_phigh := ta.barssince(latest_phigh)
BarsSince_latest_plow := ta.barssince(latest_plow)

InitialTrendBias_Long = time >= 1100 and strategy.position_size == 0 and (BarsSince_latest_phigh < BarsSince_latest_plow) and (latest_phigh > previous_phigh) ? true : false
InitialTrendBias_Short = time >= 1100 and strategy.position_size == 0 and (BarsSince_latest_phigh > BarsSince_latest_plow) and (latest_plow < previous_plow) ? true : false

plot(latest_phighPLUS, "Ember1", color=color.green, style = plot.style_circles)
plot(latest_plowMINUS, "Ember 2", color=color.red, style = plot.style_circles)

//====================================================================================================================================================================================================================
//INDICATOR 1 (C1) - TRIGGER/ CONFIRMATION
//====================================================================================================================================================================================================================


//This is the SuperTrend Indicator by KivancOzbilgic. It has been converted from version 04 to version 05 of Pinescript. 

Periods = input.int(title="ATR Period", defval=10)
src = input(hl2, title="Source")
Multiplier = input.float(title="ATR Multiplier", step=0.1, defval=3.0)
changeATR= input.bool(title="Change ATR Calculation Method ?", defval=true)
showsignals = input.bool(title="Show Buy/Sell Signals ?", defval=true)
highlighting = input.bool(title="Highlighter On/Off ?", defval=false)

atr2 = ta.sma(ta.tr, Periods)
atr= changeATR ? ta.atr(Periods) : atr2
up=src-(Multiplier*atr)
up1 = nz(up[1],up)
up := close[1] > up1 ? math.max(up,up1) : up
dn=src+(Multiplier*atr)
dn1 = nz(dn[1], dn)
dn := close[1] < dn1 ? math.min(dn, dn1) : dn

trend = 1
trend := nz(trend[1], trend)
trend := trend == -1 and close > dn1 ? 1 : trend == 1 and close < up1 ? -1 : trend

upPlot = plot(trend == 1 ? up : na, title="Up Trend", style=plot.style_linebr, linewidth=2, color=color.green)
buySignal = trend == 1 and trend[1] == -1
plotshape(buySignal ? up : na, title="UpTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.green)
plotshape(buySignal and showsignals ? up : na, title="Buy", text="Buy", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white)

dnPlot = plot(trend == 1 ? na : dn, title="Down Trend", style=plot.style_linebr, linewidth=2, color=color.red)
sellSignal = trend == -1 and trend[1] == 1
plotshape(sellSignal ? dn : na, title="DownTrend Begins", location=location.absolute, style=shape.circle, size=size.tiny, color=color.red)
plotshape(sellSignal and showsignals ? dn : na, title="Sell", text="Sell", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white)
mPlot = plot(ohlc4, title="", style=plot.style_circles, linewidth=0)
longFillColor = highlighting ? (trend == 1 ? color.green : color.white) : color.white
shortFillColor = highlighting ? (trend == -1 ? color.red : color.white) : color.white

fill(mPlot, upPlot, title="UpTrend Highligter", color=longFillColor)
fill(mPlot, dnPlot, title="DownTrend Highligter", color=shortFillColor)

alertcondition(buySignal, title="SuperTrend Buy", message="SuperTrend Buy!")
alertcondition(sellSignal, title="SuperTrend Sell", message="SuperTrend Sell!")
changeCond = trend != trend[1]
alertcondition(changeCond, title="SuperTrend Direction Change", message="SuperTrend has changed direction!")

Ind_1_Trigger = buySignal ? "BUYPOSITION" : sellSignal ? "SELLPOSITION" : "NOTRADE"

//====================================================================================================================================================================================================================
//INDICATOR 2 (C2) - CONFIRMATION
//====================================================================================================================================================================================================================





//====================================================================================================================================================================================================================
//INDICATOR 3 (VOL) - CONFIRMATION
//====================================================================================================================================================================================================================



//====================================================================================================================================================================================================================
//INDICATOR (BASELINE) - TRIGGER/ CONFIRMATION
//====================================================================================================================================================================================================================



//====================================================================================================================================================================================================================
//INDICATOR 5 (EX) - EXIT
//====================================================================================================================================================================================================================



//====================================================================================================================================================================================================================
//INDICATOR 6 (CON) - CONTINUATION TRADES
//====================================================================================================================================================================================================================



//====================================================================================================================================================================================================================
//ENTRY CONDITIONS - SUBMIT ORDERS
//====================================================================================================================================================================================================================

//Long Condition 1 - Buy Signal On SuperTrend Indicator

longCondition1 = (strategy.position_size <= 0) and Ind_1_Trigger == "BUYPOSITION" and timeCondition

//ShortCondition 1 - Sell Signal On SuperTrend Indicator

shortCondition1 = (strategy.position_size >= 0) and Ind_1_Trigger == "SELLPOSITION" and timeCondition
//PlotShape: 

//EMBERADDCODEHERE

//Define Long And Short Variables

entry_long = longCondition1
entry_short = shortCondition1

//Store Values



//Store Values 2

OpenPositionEntryPrice = float (0.0)
DistanceFromEntryPrice_L = float (0.0)
DistanceFromEntryPrice_S = float (0.0)
posSize_Long = int (0.0)
posSize_Short = int (0.0)


//Submit long and short orders based on entry conditions
if (entry_long)
    strategy.entry("Long Entry 1", strategy.long, qty=posSize)
if (entry_short)
    strategy.entry("Short Entry 1", strategy.short, qty=posSize)
    

//====================================================================================================================================================================================================================
//STATIC OR TRAILING STOP LOSS - CONDITIONS
//====================================================================================================================================================================================================================


//latest_phighPLUS := latest_phigh + SL_Leeway
//previous_phighPLUS := previous_phigh + SL_Leeway
//latest_plowMINUS := latest_plow - SL_Leeway
//previous_plowMINUS := previous_plow - SL_Leeway

tradeNum = int(0)
tradeNum := strategy.closedtrades == 0 ? 1 : strategy.closedtrades + 1


TP_Long = float (0.0)
TP_Short = float (0.0)

TP_Long := (OpenPositionEntryPrice) + (RReward_Multiplier * DistanceFromEntryPrice_L)
TP_Short := (OpenPositionEntryPrice) - (RReward_Multiplier * DistanceFromEntryPrice_S) 

//Calculate Stop Loss and Take Profit (In Price)

strategy.exit("SL/TP Long", "Long Entry 1", stop = SL_Long, limit = TP_Long)
strategy.exit("SL/TP Short", "Short Entry 1", stop = SL_Short, limit = TP_Short)



//====================================================================================================================================================================================================================
//EXIT CONDITIONS (STATIC/ TSL OR EXIT INDICATOR) - SUBMIT ORDERS
//====================================================================================================================================================================================================================

//if (dayofweek == 6 and time == 2000)
//    strategy.close_all(comment = "FRIDAY End Of Session, All Positions Exited", alert_message = "FRIDAY End Of Session, All Positions Exited")

//====================================================================================================================================================================================================================
//PLOT LABELS
//====================================================================================================================================================================================================================



//====================================================================================================================================================================================================================
//====================================================================================================================================================================================================================
//====================================================================================================================================================================================================================