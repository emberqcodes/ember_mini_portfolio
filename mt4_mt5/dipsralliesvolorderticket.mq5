//+------------------------------------------------------------------+
//|                                                      FastMoveEA.mq5 |
//|                        Generated by MetaEditor 5.00              |
//|                                                                  |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>

input double LotSize = 0.1;             // Lot size for trading
input double DipPercentage = -5.0;      // Percentage dip for buying
input double RisePercentage = 5.0;      // Percentage rise for selling
input int DipTimeFrame = 15;            // Time frame in minutes for dip
input int TradeDuration = 30;           // Time duration in minutes to hold a trade
input int AvgVolumePeriod = 14;         // Period for average volume calculation
input ENUM_TIMEFRAMES PriceChangeLookbackPeriod = PERIOD_M5;  

CTrade trade;                           // Trading object

struct TradeInfo
  {
   ulong ticket;
   datetime open_time;
  };

TradeInfo current_trade = {0, 0};       // Structure to hold current trade information

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  }
//+------------------------------------------------------------------+
//| Calculate average volume over the specified period               |
//+------------------------------------------------------------------+
double CalculateAverageVolume(int period)
  {
   double totalVolume = 0;
   for(int i = 1; i <= period; i++)
     {
      totalVolume += iVolume(_Symbol, PERIOD_M15, i);
     }
   return totalVolume / period;
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   double currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   datetime currentTime = TimeCurrent();

   // Check for existing open position by ticket
   bool hasOpenPosition = (current_trade.ticket > 0 && PositionSelectByTicket(current_trade.ticket));

   // Check for closing condition if a trade is open
   if(hasOpenPosition)
     {
      if(currentTime - current_trade.open_time >= TradeDuration * 60)
        {
         // Close position after TradeDuration minutes
         trade.PositionClose(current_trade.ticket);
         current_trade.ticket = 0;  // Reset trade info
         current_trade.open_time = 0;
         return;
        }
     }

   // Calculate price change
   double pastPrice = iClose(_Symbol, PriceChangeLookbackPeriod, 1);  // Price 15 minutes ago
   double priceChange = ((currentPrice - pastPrice) / pastPrice) * 100;

   // Calculate volume and average volume
   double currentVolume = iVolume(_Symbol, PERIOD_M15, 0);
   double averageVolume = CalculateAverageVolume(AvgVolumePeriod);

   if(!hasOpenPosition)
     {
      if(priceChange <= DipPercentage && currentVolume > 2 * averageVolume)
        {
         // Buy signal after significant dip and high volume
         if(trade.Buy(LotSize, _Symbol))
           {
            current_trade.ticket = trade.ResultOrder();  // Store the trade ticket
            current_trade.open_time = currentTime;       // Record the trade open time
           }
        }
      else if(priceChange >= RisePercentage && currentVolume > 2 * averageVolume)
        {
         // Sell signal after significant rise and high volume
         if(trade.Sell(LotSize, _Symbol))
           {
            current_trade.ticket = trade.ResultOrder();  // Store the trade ticket
            current_trade.open_time = currentTime;       // Record the trade open time
           }
        }
     }
  }
//+------------------------------------------------------------------+
